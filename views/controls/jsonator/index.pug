include ./mutators/mutators
mixin renderfield(value,caption,options)
    -
        function getType(name,val) {
            if (/[a-z]+(_us|_sec)/.test(name))
                return "datetime-local"
            
            if (val && /^[0-9.-]+$/.test(val) && [".","-"].every(i=>val.toString().indexOf(i) === val.toString().lastIndexOf(i)))
                return "number"
            
            return "text";
        }
    -
        function getValue(name,val) {
            const tp = getType(name,val);
            if (tp === "number")
                return Math.round((Number(val) + Number.EPSILON) * 1000) / 1000

            if (tp.includes("time"))
                return (name.endsWith("_us")?new Date(Number(val)/1000):new Date(Number(val)*1000)).toLocaleTimeString()
            
            return val
        }
    if (!options.skipfields || !options.skipfields.includes(caption))
        - const isVersioned = (val)=>(typeof val === "object") && (val.value !== undefined) && (val.version !== undefined)
        - var versioned=isVersioned(value)
        if options.editable
            div.d-flex.flex-row.flex-nowrap
                if caption
                    span(class="input-group-text")=caption
                input(type=getType(caption, versioned?value.value:value)
                    readonly=!options.editable
                    name=options.path + (versioned?`(${value.version})`:"")
                    class=options.plaintext ? "form-control-plaintext" : "form-control"
                    value=getValue(caption, versioned?value.value:value))
        else
            div.d-flex.flex-column.align-items-center(class=caption?"grated":"")
                if caption
                    span.text-secondary=caption
                span.text-primary(name=options.path + (versioned?`(${value.version})`:""))=getValue(caption, versioned?value.value:value)          

mixin renderarray(data,options)
    - const columns=data[1].reduce((cols,cur)=>cols.concat(Object.keys(cur).filter(col=>!cols.includes(col))),[])
    script.
        function sortTable(th,idx) {
            function compareValue(a,b) {
                if ((isNaN(a) === isNaN(b)) && isNaN(a)){
                    return a.localeCompare(b);
                } else {
                    return a-b;
                }
            }
            const tbody = th.parentNode.parentNode.parentElement.querySelector("tbody");
            th.sorted = !th.sorted;
            Array.from(document.querySelector("#tab-content-Tasks > div > table > thead > tr > th:nth-child(2)").parentNode.children).forEach(th=>th.innerText=th.innerText.replaceAll(/[⤒⤓]/g,""))
            th.innerText += (th.sorted ? " ⤓" : " ⤒");

            Array.from(tbody.childNodes)
                 .sort((a,b)=>compareValue(a.children[idx].innerText,b.children[idx].innerText) * (th.sorted ? 1 : -1))
                 .forEach(row=>tbody.appendChild(row))
        }
    div.container-fluid(style="padding-top: 5px;")
        table.table(class='table-striped table-dark table-hover caption-top table-sm table-striped table-bordered'
                    data-toggle="table" 
                    data-sortable="true")
            thead
                tr
                    each column,idx in columns
                        th.text-secondary(scope="col" data-sortable="true" role="button" onClick="sortTable(event.target,"+(idx+1)+")")=column
            tbody
                each row,idx in data[1]
                    tr
                        - var path = `${options.path}[${idx}]`;
                        form(ws-send=options.path name=options.path)
                            each column in columns
                                td
                                    +jsonator([column,row[column]],undefined,{...options,path:`${path}/${column}`,expand:true,plaintext:true})

mixin jsonator(data,caption,options)
    - const uuid = ()=>([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,a=>(a^Math.random()*16>>a/4).toString(16))
    - const isVersioned = (val)=>(typeof val === "object") && (val.value !== undefined) && (val.version !== undefined)
    - const isObject = (val)=>(typeof val === "object") && (typeof val !== "string") && !isVersioned(val)
    - const isArray = (val)=>Array.isArray(val) && (typeof val !== "string")
    - const isValue = (val)=>!isArray(val) && !isObject(val)
    - options = {...options,"path":options?.path??`/${data[0]}/status/cmd`}
    - 
        mutator = options.mutations?.find(mut=>mut.endswith ? 
                                                options.path.endsWith(mut.endswith) :
                                                options.path.startsWith(mut.startswith))?.mutator
    if mutator
        +#{mutator}(data,caption,options)
    else if isValue(data[1])
        +renderfield(data[1],caption ,options)
    else if isArray(data[1])
        +renderarray(data,options)
    else
        - var stats = Object.entries(data[1]).map(entry=>[...entry,uuid()])
        if (options.tiled && stats.length)
            fieldset(class=`d-flex flex-column flex-wrap ${(caption||data[0]) ? "border" : ""} mt-3 pt-1 align-self-start`)
                legend.header.text-primary.mt-n4.position-absolute=caption?caption:data[0]
                fieldset(class=`d-flex flex-row flex-wrap ${(caption||data[0]) ? "border" : ""} mt-3 pt-1 ms-3 me-3 align-self-start`)
                    each stat,idx in stats.filter(stat=>isValue(stat[1])).sort((a,b)=>a[0].localeCompare(b[0]))
                        +renderfield(stat[1],stat[0],{...options,"path":options.path+"/"+stat[0],"parent":data[1]})
                fieldset(class=`d-flex flex-row flex-wrap ${(caption||data[0]) ? "border" : ""} mt-3 pt-1 ms-3 me-3 align-self-start`)
                    each stat,idx in stats.filter(stat=>isObject(stat[1])).sort((a,b)=>a[0].localeCompare(b[0]))
                        +jsonator(stat,undefined,{...options,"path":options.path+"/"+stat[0],"parent":data[1]})
        else
            fieldset.container-fluid(style="padding-top: 5px;")
                div.d-flex
                    each stat,idx in stats.filter(stat=>isValue(stat[1])).sort((a,b)=>a[0].localeCompare(b[0]))
                        +jsonator(stat,stat[0],{...options,"path":options.path+"/"+stat[0],"parent":data[1]})
                div.tabs(style="padding-top: 5px;")
                    ul(class="nav nav-tabs" role="tablist")
                        each stat,idx in stats.filter(stat=>isObject(stat[1])).sort((a,b)=>a[0].localeCompare(b[0]))
                            li.nav-item(role="presentation")
                                button(class=`nav-link ${idx===0?"active":""}`
                                    data-bs-toggle="tab" 
                                    data-bs-target="#tab-content-"+stat[2]
                                    type="button"
                                    id="tab-"+stat[2]
                                    aria-controls="tab-content-"+stat[2]
                                    hx-target="#tab-content-"+stat[2]
                                    role="tab")=stat[0]
                    div(class="tab-content" role="tabpanel")
                        each stat,idx in stats.filter(stat=>isObject(stat[1]))
                            div(class=`tab-pane fade container-fluid ${idx===0?"active show":""}` 
                                id="tab-content-"+stat[2] 
                                role="tabpanel"
                                aria-labelledby="tab-"+stat[2])
                                +jsonator(stat,undefined,{...options,"path":options.path+"/"+stat[0],"parent":data[1]})
